#Libraries
library(dplyr)
library(tidyverse)
library(ggplot2)
library(readxl)
library(ggsci)
library(gridExtra)
library(ggpubr)
library(lubridate)

#Load your data, I will call mine DataForPlot
###Plot
Plot1 <- DataForPlot %>% 
#Select the desired parameters, in my case: Stage, Cultivar and miR
  select(Stage, Cultivar, miR) %>% 
#To group by a specific parameter, in my case Stage
  group_by(Stage) %>% 
#To calculate the mean of the measured (numeric) parameter
  summarise(meanmiR= mean(miR)) %>% 
##Geom_col plot (column chart), set x, y, and group
  ggplot() + geom_col(aes(x = Stage, y= meanmiR, group=Stage),
#Manual selection of the columns color
                      fill = c("#EBEBEBFF", "#EBEBEBFF" ),
#Manual selection of the border color of the columns
                      color = c("#2C2C2C", "#2C2C2C" ),
#Transparency of the columns, border size, width of the columns, remouve na: T/F)
                      alpha = 0.65, size= 0.6, width = 0.3, na.rm = T) +
#Limits of the y axis
  ylim(0,30) +
#Define the title of axis x, axis y, and title of the graph (NULL for no title)
  labs(x= NULL, y = "Measurement of numeric parameter", title = "My Plot", ) +
#Customization of title (Horizontal position, size, vertical position, face, and color)
  theme(plot.title = element_text(hjust = 0.5, size = 14, vjust = 1, face="bold", color = "#2C2C2C"))+
#Manual set of the order of the columns (First "Stage1" and then "Stage2"
  scale_x_discrete(limits = c("Stage1", "Stage2")) +
#Axis title customization (size, color, horizontal position, face)
  theme(axis.title=element_text(size=12, color = "#454545", hjust = 0.45, face="bold"))+
#To make background white
  theme(panel.background = element_blank())+ 
#To set axis text size
  theme(axis.text= element_text(size= 10)) +
#Customization of the axis line (size, color, linetype)
  theme(axis.line = element_line(size = 0.5, colour = "#2C2C2C", linetype=1))+
##Geom_line (line chart) plot (size of the lines, remove NA: T/F, linetype, data
  geom_line(size = 1, na.rm = T, linetype = 1, data = DataForPlot %>% 
#Ungroup
              ungroup() %>% 
#Select the desired parameters, in my case: Stage, Cultivar and miR
              select(Stage, Cultivar, miR) %>%
#Group by the desired parameters
              group_by(Cultivar, Stage) %>%
#Calculate mean of the numeric parameter
              summarise(meanstagemiR= mean(miR)), 
#Define x, y, group, and color
            aes(x = Stage, y= meanstagemiR, group = Cultivar, color=Cultivar)) +
#Manual customization of the colors depending of the cultivar
  scale_color_manual(limits = c("GroupA", "GroupB", "GroupC", "GroupD", "GroupE"), 
#To give them names
                     labels = c("GroupA", "GroupB", "GroupC", "GroupD", "GroupE"),
#To manually choose the colors
                     values = c("#ffae49", "#b5d63d", "#44a5c2", "#454545", "#d44bfa")) +
##Geom_point (point chart) plot (size of the points, transparency, remove NA: T/F, data
  geom_point(size =2, alpha = 1, na.rm = T, data = DataForPlot %>% 
#Ungroup
      ungroup() %>% 
#Select the desired parameters
      select(Stage, Cultivar, miR) %>%
#Group by the desired parameters
      group_by(Cultivar, Stage) %>%
#Calculate the mean of the measured (numeric) parameter and represent just a point coinciding with the mean of the group per stage
      summarise(meanstagemiR156_1= mean(miR)), 
#Define x and y
    aes(x = Stage, y= meanstagemiR156_1, 
#Define agrupation method, color, shape of the points, and fill of the points (in my case by cultivar)
        group = Cultivar, color = Cultivar, shape = Cultivar, fill = Cultivar))+
#Manually customization of the color for each group of samples
  scale_fill_manual(values = c("GroupA" ="#ffae49","GroupB"= "#b5d63d","GroupC" = "#44a5c2", "GroupD" =  "#454545", "GroupE"= "#d44bfa"))+
#Manually customization of the shapes for each group of samples
  scale_shape_manual(values = c("GroupA" = 22, "GroupB"= 25, "GroupC" =23, "GroupD" = 24, "GroupE"= 21))+
#Manually set of the limits of the y axis must be in agreement with the one in line 29
scale_y_continuous(limits=c(0, 30),
#To finish the y axis in a thick
                     expand = c(0,0))
#To visualice
Plot1

##Plots together
#To plot 4 different plots together (ggplot() + theme_void() is to give extra space between plots)
ggarrange(Plot1, ggplot() + theme_void(),Plot2, Plot3, ggplot() + theme_void(), Plot4, 
#Set a comond legend
common.legend = TRUE,
#Legend position
legend="bottom",
#Labels of the different plots (With extra ones " " for the ggplot() + theme_void()
          labels = c("A", "", "B", "C","", "D"),
#Position of the label
          hjust=-0.4,
#Widths of the graphs 
          widths = c(1, 0.2, 1,1, 0.2, 1),
#Label font customization (size, face, color) 
          font.label = list(size = 18, face = "bold", color ="black")) 
